struct FunctParameters {
  int16_t p_up_len;
  int16_t p_down_len;
};

void screen_center (char *_str);
void lcd_menu_setup();
void main_screen();
//void decide(byte _cur_screen, byte cur_selection, byte _button_click, int _var=-1);
void global_vars_init();
bool check_trigs();
bool pressure_update_timer();
bool shutoff_prog();
bool pulse_off();
bool pulse_on();
bool run_manual();
void serial_setup();
void pinMode_setup();
void ADC_setup();
void rot_setup();
void read_default_vars();
void button_check();
int enc_check(int16_t encNewPosition);
void decide(uint8_t _cur_screen, uint8_t cur_selection, uint8_t _button_click, uint8_t _button_event, uint8_t* _vars);
void stop_program_now(bool _stop_all = false);
void write_vars_for_test(bool _zero = false);
void pulse_off_now();
void pulse_on_now();
void stop_and_rest();
void check_pressure_and_decide();
float check_pressure_sensor();
bool pressure_in_range(float _p_now, float _curr_p_goal);
float read_pressure_sensor();
unsigned long how_far_pressure(float _p_goal);
void pressure_update_on_rest_timer();
bool go_to_pressure();
void run_program_with_sensor_next_prog();
void mid(const char *src, size_t start, size_t length, char *dst, size_t dstlen);
unsigned int sd_file_no_func();
void sd_write_num_file(unsigned int _file_no, bool _del = true);
void Log(uint8_t level, const char* message, bool echo = true);
void timestamp_func(char* str);
void build_file_name(char* _str);
void CSV(float _pressure_now);
float mapf(float val, float in_min, float in_max, float out_min, float out_max);
void sd_init_msg(bool _init_val);
//void handleEvent(AceButton* button, uint8_t eventType, uint8_t buttonState);
